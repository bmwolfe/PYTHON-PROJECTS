import pygame

collisions = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 1033, 1033, 1033, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 1033, 1033, 1033, 2355, 0, 0, 0, 1879, 1033, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 0, 0, 0, 0, 0, 2395, 2395, 0, 0, 1879, 1033, 2395, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 2395, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 1879, 2395, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 1033, 1033, 1033, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 1033, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 2395, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 0, 0, 0, 2395, 2395, 0, 0, 0, 0, 0, 0, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 2395, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 2395, 0, 2395, 2395, 2395, 0, 2395, 0, 0, 0, 0, 2355, 0, 1367, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 2395, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 2395, 0, 0, 2395, 2395, 855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 2903, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 2395, 855, 0, 2395, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2903, 2903, 0, 2395, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 2395, 1033, 1033, 1033, 1033, 855, 1879, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2903, 2903, 0, 2395, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 2395, 2903, 0, 0, 0, 0, 2395, 2355, 2395, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 2395, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2355, 0, 2395, 2395, 0, 0, 0, 0, 0, 0, 2903, 0, 0, 0, 0, 2395, 2395, 1154, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 2395, 2395, 2395, 2395, 2395, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 2395, 2395, 0, 0, 2395, 2395, 0, 0, 0, 2395, 2355, 0, 0, 0, 0, 1367, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 2355, 1879, 2395, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 1879, 0, 0, 0, 2355, 0, 0, 2903, 2903, 1367, 2395, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 2355, 0, 0, 0, 2395, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 2903, 0, 0, 0, 0, 0, 0, 0, 0, 1154, 1154, 1154, 1154, 2395, 2395, 2903, 2395, 0, 0, 0, 0, 0, 0, 1367, 1033, 1033, 1033, 1033, 2355, 0, 0, 2903, 2903, 2395, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 0, 1033, 1033, 1033, 1033, 1033, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 1367, 2395, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 2903, 0, 0, 0, 0, 0, 0, 0, 0, 2903, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2903, 2903, 0, 0, 0, 0, 0, 0, 1367, 2395, 2395, 2395, 855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2903, 2903, 0, 1367, 2395, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 2391, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 0, 0, 0, 0, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 855, 0, 0, 0, 0, 1367, 2395, 2395, 0, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 0, 1879, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 2395, 2395, 2395, 2395, 1033, 1033, 0, 1033, 1033, 1033, 1033, 1033, 2395, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1879, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2355, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 855, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 855, 0, 0, 0, 0, 0, 0, 0, 0, 2903, 2903, 1367, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 855, 0, 0, 0, 0, 0, 0, 1367, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 2395, 855, 0, 0, 0, 0, 1367, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 855, 0, 0, 0, 1367, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 2395, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2395, 2395, 2395, 2395, 2395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

class Collisions:
    def __init__(self, walls, tile_size, map_width_tiles):
        self.walls = walls
        self.tile_size = tile_size
        self.map_width_tiles = map_width_tiles

        for i in range(0, len(collisions),):
            if collisions[i] == 2395: # Standard collision box
                row = i // map_width_tiles  # Calculate row in the grid
                col = i % map_width_tiles   # Calculate column in the grid
                rect = pygame.Rect((col * self.tile_size) - self.tile_size  - 56, row * self.tile_size - 54, self.tile_size, self.tile_size)
                walls.append(rect)
            elif collisions[i] == 2903: # Smaller box for logs, bushes and small trees
                row = i // map_width_tiles
                col = i % map_width_tiles
                rect = pygame.Rect((col * self.tile_size) - self.tile_size  - 28, row * self.tile_size - 48, 10, 10)
                walls.append(rect)
            elif collisions[i] == 1154: # Box to get close to flowing water without getting in it
                row = i // map_width_tiles 
                col = i % map_width_tiles 
                rect = pygame.Rect((col * self.tile_size) - self.tile_size - 32, row * self.tile_size - 60, self.tile_size, 15)
                walls.append(rect)
            elif collisions[i] == 855: # Box to prevent you from access bottom left corner of a tile
                row = i // map_width_tiles 
                col = i % map_width_tiles 
                rect = pygame.Rect((col * self.tile_size) - self.tile_size - 25, row * self.tile_size - 25, 15, 15)
                walls.append(rect)
            elif collisions[i] == 1367: # Box to prevent you from access bottom right corner of a tile
                row = i // map_width_tiles 
                col = i % map_width_tiles 
                rect = pygame.Rect((col * self.tile_size) - self.tile_size - 5, row * self.tile_size - 25, 15, 15)
                walls.append(rect)
            elif collisions[i] == 1879: # Box to prevent you from access top right corner of a tile
                row = i // map_width_tiles 
                col = i % map_width_tiles 
                rect = pygame.Rect((col * self.tile_size) - self.tile_size, row * self.tile_size - 5, 10, 15)
                walls.append(rect)
            elif collisions[i] ==  2355: # Box to prevent you from access top left corner of a tile
                row = i // map_width_tiles 
                col = i % map_width_tiles 
                rect = pygame.Rect((col * self.tile_size) - (2 * self.tile_size) - 10, row * self.tile_size - 30, 15, 15)
                walls.append(rect)
            elif collisions[i] == 1033: # Box to get close to edge without going up or down
                row = i // map_width_tiles 
                col = i % map_width_tiles 
                rect = pygame.Rect((col * self.tile_size) - self.tile_size - 56, row * self.tile_size - 56, self.tile_size, 26)
                walls.append(rect)

    def draw(self, screen, camera_x, camera_y):
        # Draw collision rectangles for debugging
        for wall in self.walls:
            pygame.draw.rect(screen, (0,0,0), pygame.Rect(wall[0] - camera_x, wall[1] - camera_y, self.tile_size, self.tile_size), 2)
